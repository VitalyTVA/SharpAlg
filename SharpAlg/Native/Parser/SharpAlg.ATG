COMPILER SharpAlg

/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  identifier  = letter {letter | digit}.
  number = digit {digit}.

IGNORE cr + lf + tab

PRODUCTIONS

SharpAlg 										(. Expr expr; .)
= AdditiveExpression<out expr>					(. this.Expr = expr; .)
.

AdditiveExpression<out Expr expr>				(. bool minus; Expr rightExpr; .)			
= MultiplicativeExpression<out expr>
	{
	AdditiveOperation<out minus> 
	MultiplicativeExpression<out rightExpr>		(. expr = builder.Binary(expr, (minus ? Expr.Minus(rightExpr) : rightExpr), BinaryOperation.Add); .)
	}
.

AdditiveOperation<out bool minus>
=												(. minus = false; .)
  ( '+'
  | '-'											(. minus = true; .)
  )
.

MultiplicativeExpression<out Expr expr>			(. bool divide; Expr rightExpr; .)			
= PowerExpression<out expr>
	{
	MultiplicativeOperation<out divide> 
	PowerExpression<out rightExpr>				(. expr = builder.Binary(expr, (divide ? Expr.Inverse(rightExpr) : rightExpr), BinaryOperation.Multiply); .)
	}
.

MultiplicativeOperation<out bool divide>
=												(. divide = false; .)
  ( '*'
  | '/'											(. divide = true; .)
  )
.

PowerExpression<out Expr expr>					(. Expr rightExpr; .)			
= Terminal<out expr>
	{
	'^' 
	Terminal<out rightExpr>						(. expr = builder.Power(expr, rightExpr); .)
	}
.

Terminal<out Expr expr>							(. expr = null; .)
=	
	(number										(. expr = Expr.Constant(Int32.Parse(t.val)); .)
	| '('AdditiveExpression<out expr>')'
	| identifier								(. expr = Expr.Parameter(t.val); .)
	)
.

END SharpAlg.
