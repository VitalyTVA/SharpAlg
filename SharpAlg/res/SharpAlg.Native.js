/*Generated by SharpKit 5 v5.01.1000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpAlg$Native$Expr =
{
    fullname: "SharpAlg.Native.Expr",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Constant: function (constant)
        {
            return new SharpAlg.Native.ConstantExpr.ctor(constant);
        },
        Parameter: function (parameterName)
        {
            return new SharpAlg.Native.ParameterExpr.ctor(parameterName);
        },
        Binary: function (left, right, type)
        {
            return new SharpAlg.Native.BinaryExpr.ctor(left, right, type);
        }
    },
    assemblyName: "SharpAlg",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Native$Expr);
var SharpAlg$Native$ConstantExpr =
{
    fullname: "SharpAlg.Native.ConstantExpr",
    baseTypeName: "SharpAlg.Native.Expr",
    assemblyName: "SharpAlg",
    Kind: "Class",
    definition:
    {
        ctor: function (value)
        {
            this._Value = 0;
            SharpAlg.Native.Expr.ctor.call(this);
            this.set_Value(value);
        },
        Value$$: "System.Double",
        get_Value: function ()
        {
            return this._Value;
        },
        set_Value: function (value)
        {
            this._Value = value;
        },
        ExprEquals: function (expr)
        {
            var other = As(expr, SharpAlg.Native.ConstantExpr.ctor);
            return other != null && other.get_Value() == this.get_Value();
        },
        Visit$1: function (T, visitor)
        {
            return visitor.Constant(this);
        }
    }
};
JsTypes.push(SharpAlg$Native$ConstantExpr);
var SharpAlg$Native$ParameterExpr =
{
    fullname: "SharpAlg.Native.ParameterExpr",
    baseTypeName: "SharpAlg.Native.Expr",
    assemblyName: "SharpAlg",
    Kind: "Class",
    definition:
    {
        ctor: function (parameterName)
        {
            this._ParameterName = null;
            SharpAlg.Native.Expr.ctor.call(this);
            this.set_ParameterName(parameterName);
        },
        ParameterName$$: "System.String",
        get_ParameterName: function ()
        {
            return this._ParameterName;
        },
        set_ParameterName: function (value)
        {
            this._ParameterName = value;
        },
        ExprEquals: function (expr)
        {
            var other = As(expr, SharpAlg.Native.ParameterExpr.ctor);
            return other != null && other.get_ParameterName() == this.get_ParameterName();
        },
        Visit$1: function (T, visitor)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(SharpAlg$Native$ParameterExpr);
var SharpAlg$Native$BinaryExpr =
{
    fullname: "SharpAlg.Native.BinaryExpr",
    baseTypeName: "SharpAlg.Native.Expr",
    assemblyName: "SharpAlg",
    Kind: "Class",
    definition:
    {
        ctor: function (left, right, operation)
        {
            this._Left = null;
            this._Right = null;
            this._Operation = 0;
            SharpAlg.Native.Expr.ctor.call(this);
            this.set_Operation(operation);
            this.set_Right(right);
            this.set_Left(left);
        },
        Left$$: "SharpAlg.Native.Expr",
        get_Left: function ()
        {
            return this._Left;
        },
        set_Left: function (value)
        {
            this._Left = value;
        },
        Right$$: "SharpAlg.Native.Expr",
        get_Right: function ()
        {
            return this._Right;
        },
        set_Right: function (value)
        {
            this._Right = value;
        },
        Operation$$: "SharpAlg.Native.BinaryOperation",
        get_Operation: function ()
        {
            return this._Operation;
        },
        set_Operation: function (value)
        {
            this._Operation = value;
        },
        ExprEquals: function (expr)
        {
            var other = As(expr, SharpAlg.Native.BinaryExpr.ctor);
            return other != null && other.get_Left().ExprEquals(this.get_Left()) && other.get_Right().ExprEquals(this.get_Right()) && other.get_Operation() == this.get_Operation();
        },
        Visit$1: function (T, visitor)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(SharpAlg$Native$BinaryExpr);
var SharpAlg$Native$ExpressionExtensions =
{
    fullname: "SharpAlg.Native.ExpressionExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Evaluate: function (expr)
        {
            return expr.Visit$1(System.Double.ctor, new SharpAlg.Native.ExpressionEvaluator());
        }
    },
    assemblyName: "SharpAlg",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Native$ExpressionExtensions);
if (typeof(SharpAlg) == "undefined")
    var SharpAlg = {};
if (typeof(SharpAlg.Native) == "undefined")
    SharpAlg.Native = {};
SharpAlg.Native.ExpressionEvaluator = function ()
{
};
SharpAlg.Native.ExpressionEvaluator.prototype.Constant = function (constant)
{
    return constant.get_Value();
};
