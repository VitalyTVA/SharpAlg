/*Generated by SharpKit 5 v5.01.1000*/
if (typeof ($Inherit) == 'undefined') {
	var $Inherit = function (ce, ce2) {

		if (typeof (Object.getOwnPropertyNames) == 'undefined') {

			for (var p in ce2.prototype)
				if (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p])
					ce.prototype[p] = ce2.prototype[p];
			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		} else {

			var props = Object.getOwnPropertyNames(ce2.prototype);
			for (var i = 0; i < props.length; i++)
				if (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined')
					Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));

			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		}

	}
};
if (typeof(SharpAlg) == "undefined")
    var SharpAlg = {};
if (typeof(SharpAlg.Native) == "undefined")
    SharpAlg.Native = {};
SharpAlg.Native.Expr = function ()
{
};
SharpAlg.Native.Expr.Constant = function (constant)
{
    return new SharpAlg.Native.ConstantExpr(constant);
};
SharpAlg.Native.Expr.Parameter = function (parameterName)
{
    return new SharpAlg.Native.ParameterExpr(parameterName);
};
SharpAlg.Native.Expr.Binary = function (left, right, type)
{
    return new SharpAlg.Native.BinaryExpr(left, right, type);
};
SharpAlg.Native.ConstantExpr = function (value)
{
    this.Value = 0;
    SharpAlg.Native.Expr.call(this);
    this.Value = value;
};
$Inherit(SharpAlg.Native.ConstantExpr, SharpAlg.Native.Expr);
SharpAlg.Native.ParameterExpr = function (parameterName)
{
    this.ParameterName = null;
    SharpAlg.Native.Expr.call(this);
    this.ParameterName = parameterName;
};
$Inherit(SharpAlg.Native.ParameterExpr, SharpAlg.Native.Expr);
SharpAlg.Native.BinaryExpr = function (left, right, operation)
{
    this.Left = null;
    this.Right = null;
    this.Operation = 0;
    SharpAlg.Native.Expr.call(this);
    this.Operation = operation;
    this.Right = right;
    this.Left = left;
};
$Inherit(SharpAlg.Native.BinaryExpr, SharpAlg.Native.Expr);
