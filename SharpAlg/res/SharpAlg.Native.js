/*Generated by SharpKit 5 v5.01.1000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpAlg$Native$ContextFactory =
{
    fullname: "SharpAlg.Native.ContextFactory",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        CreateEmpty: function ()
        {
            return new SharpAlg.Native.Context.ctor();
        },
        CreateDefault: function ()
        {
            return new SharpAlg.Native.Context.ctor().Register$$Function(SharpAlg.Native.Functions.get_Factorial()).Register$$Function(SharpAlg.Native.Functions.get_Factorial()).Register$$Function(SharpAlg.Native.Functions.get_Ln()).Register$$Function(SharpAlg.Native.Functions.get_Diff());
        },
        cctor: function ()
        {
            SharpAlg.Native.ContextFactory.Empty = null;
            SharpAlg.Native.ContextFactory.Default = null;
            SharpAlg.Native.ContextFactory.Default = SharpAlg.Native.ContextFactory.CreateDefault();
            SharpAlg.Native.ContextFactory.Default.set_ReadOnly(true);
            SharpAlg.Native.ContextFactory.Empty = SharpAlg.Native.ContextFactory.CreateEmpty();
            SharpAlg.Native.ContextFactory.Empty.set_ReadOnly(true);
        }
    },
    assemblyName: "SharpAlg",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Native$ContextFactory);
var SharpAlg$Native$DiffFunction =
{
    fullname: "SharpAlg.Native.DiffFunction",
    baseTypeName: "SharpAlg.Native.Function",
    assemblyName: "SharpAlg",
    interfaceNames: ["SharpAlg.Native.ISupportConvolution"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            SharpAlg.Native.Function.ctor.call(this, "diff");
        },
        Evaluate: function (evaluator, args)
        {
            return this.Convolute(args).Visit$1(SharpAlg.Native.Number.ctor, evaluator);
        },
        Convolute: function (args)
        {
            var argsTail = SharpAlg.Native.FunctionalExtensions.Tail$1(SharpAlg.Native.Expr.ctor, args);
            if (!System.Linq.Enumerable.All$1(SharpAlg.Native.Expr.ctor, argsTail, $CreateAnonymousDelegate(this, function (x)
            {
                return Is(x, SharpAlg.Native.ParameterExpr.ctor);
            })))
                throw $CreateException(new SharpAlg.Native.ExpressionDefferentiationException.ctor$$String("All diff arguments should be parameters"), new Error());
            var diffList = System.Linq.Enumerable.Cast$1(SharpAlg.Native.ParameterExpr.ctor, argsTail);
            if (!System.Linq.Enumerable.Any$1$$IEnumerable$1(SharpAlg.Native.ParameterExpr.ctor, diffList))
                return SharpAlg.Native.ExpressionExtensions.Diff(System.Linq.Enumerable.First$1$$IEnumerable$1(SharpAlg.Native.Expr.ctor, args), null);
            var result = System.Linq.Enumerable.First$1$$IEnumerable$1(SharpAlg.Native.Expr.ctor, args);
            SharpAlg.Native.FunctionalExtensions.ForEach$1(SharpAlg.Native.ParameterExpr.ctor, diffList, $CreateAnonymousDelegate(this, function (x)
            {
                result = SharpAlg.Native.ExpressionExtensions.Diff(result, x.get_ParameterName());
            }));
            return result;
        }
    }
};
JsTypes.push(SharpAlg$Native$DiffFunction);
var SharpAlg$Native$ExpressionExtensions =
{
    fullname: "SharpAlg.Native.ExpressionExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Evaluate: function (expr, context)
        {
            return expr.Visit$1(SharpAlg.Native.Number.ctor, new SharpAlg.Native.ExpressionEvaluator((context != null ? context : SharpAlg.Native.ContextFactory.Default)));
        },
        Diff: function (expr, parameterName)
        {
            return expr.Visit$1(SharpAlg.Native.Expr.ctor, new SharpAlg.Native.DiffExpressionVisitor(SharpAlg.Native.Builder.ExprBuilderFactory.CreateDefault(), parameterName));
        },
        Print: function (expr)
        {
            return expr.Visit$1(System.String.ctor, SharpAlg.Native.Printer.ExpressionPrinter.Instance);
        },
        Parse: function (expression, builder)
        {
            return SharpAlg.Native.ExpressionExtensions.GetExpression(SharpAlg.Native.ExpressionExtensions.ParseCore(expression, (builder != null ? builder : SharpAlg.Native.Builder.ExprBuilderFactory.CreateDefault())));
        },
        GetExpression: function (parser)
        {
            if (parser.errors.Count > 0)
                throw $CreateException(new System.InvalidOperationException.ctor$$String("String can not be parsed"), new Error());
            return parser.Expr;
        },
        ParseCore: function (expression, builder)
        {
            var scanner = new SharpAlg.Native.Parser.Scanner.ctor(expression);
            var parser = new SharpAlg.Native.Parser.Parser(scanner, builder);
            parser.Parse();
            return parser;
        }
    },
    assemblyName: "SharpAlg",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Native$ExpressionExtensions);
var SharpAlg$Native$Functions =
{
    fullname: "SharpAlg.Native.Functions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            SharpAlg.Native.Functions.factorial = null;
            SharpAlg.Native.Functions.ln = null;
            SharpAlg.Native.Functions.diff = null;
        },
        Factorial$$: "SharpAlg.Native.Function",
        get_Factorial: function ()
        {
            return (SharpAlg.Native.Functions.factorial != null ? SharpAlg.Native.Functions.factorial : (SharpAlg.Native.Functions.factorial = new SharpAlg.Native.FactorialFunction.ctor()));
        },
        Ln$$: "SharpAlg.Native.Function",
        get_Ln: function ()
        {
            return (SharpAlg.Native.Functions.ln != null ? SharpAlg.Native.Functions.ln : (SharpAlg.Native.Functions.ln = new SharpAlg.Native.LnFunction.ctor()));
        },
        Diff$$: "SharpAlg.Native.Function",
        get_Diff: function ()
        {
            return (SharpAlg.Native.Functions.diff != null ? SharpAlg.Native.Functions.diff : (SharpAlg.Native.Functions.diff = new SharpAlg.Native.DiffFunction.ctor()));
        }
    },
    assemblyName: "SharpAlg",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpAlg$Native$Functions);
