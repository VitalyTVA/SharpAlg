/*Generated by SharpKit 5 v5.01.1000*/
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpAlg$Native$Context =
{
    fullname: "SharpAlg.Native.Context",
    baseTypeName: "System.Object",
    assemblyName: "SharpAlg.Implementation",
    interfaceNames: ["SharpAlg.Native.IContext"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.names = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, SharpAlg.Native.Expr.ctor);
            this.functions = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, SharpAlg.Native.Function.ctor);
            this._ReadOnly = false;
            System.Object.ctor.call(this);
        },
        ReadOnly$$: "System.Boolean",
        get_ReadOnly: function ()
        {
            return this._ReadOnly;
        },
        set_ReadOnly: function (value)
        {
            this._ReadOnly = value;
        },
        Register$$Function: function (func)
        {
            this.CheckReadonly();
            this.functions.set_Item$$TKey(func.get_Name(), func);
            return this;
        },
        GetFunction: function (name)
        {
            return SharpAlg.Native.FunctionalExtensions.TryGetValue$2(System.String.ctor, SharpAlg.Native.Function.ctor, this.functions, name);
        },
        Register$$String$$Expr: function (name, value)
        {
            this.CheckReadonly();
            this.names.set_Item$$TKey(name, value);
            return this;
        },
        GetValue: function (name)
        {
            return SharpAlg.Native.FunctionalExtensions.TryGetValue$2(System.String.ctor, SharpAlg.Native.Expr.ctor, this.names, name);
        },
        CheckReadonly: function ()
        {
            if (this.get_ReadOnly())
                throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
        }
    }
};
JsTypes.push(SharpAlg$Native$Context);
var SharpAlg$Native$ExpressionEqualityComparer =
{
    fullname: "SharpAlg.Native.ExpressionEqualityComparer",
    baseTypeName: "System.Object",
    assemblyName: "SharpAlg.Implementation",
    interfaceNames: ["SharpAlg.Native.IExpressionVisitor$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (expr)
        {
            this.expr = null;
            System.Object.ctor.call(this);
            this.expr = expr;
        },
        Constant: function (constant)
        {
            return this.DoEqualityCheck$1(SharpAlg.Native.ConstantExpr.ctor, constant, $CreateAnonymousDelegate(this, function (x1, x2)
            {
                return System.Object.Equals$$Object$$Object(x1.get_Value(), x2.get_Value());
            }));
        },
        Add: function (multi)
        {
            return this.CompareMultiExpr$1(SharpAlg.Native.AddExpr.ctor, multi);
        },
        Multiply: function (multi)
        {
            return this.CompareMultiExpr$1(SharpAlg.Native.MultiplyExpr.ctor, multi);
        },
        Power: function (power)
        {
            return this.DoEqualityCheck$1(SharpAlg.Native.PowerExpr.ctor, power, $CreateAnonymousDelegate(this, function (x1, x2)
            {
                return this.EqualsCore(x1.get_Left(), x2.get_Left()) && this.EqualsCore(x1.get_Right(), x2.get_Right());
            }));
        },
        Parameter: function (parameter)
        {
            return this.DoEqualityCheck$1(SharpAlg.Native.ParameterExpr.ctor, parameter, $CreateAnonymousDelegate(this, function (x1, x2)
            {
                return x1.get_ParameterName() == x2.get_ParameterName();
            }));
        },
        Function: function (functionExpr)
        {
            return this.DoEqualityCheck$1(SharpAlg.Native.FunctionExpr.ctor, functionExpr, $CreateAnonymousDelegate(this, function (x1, x2)
            {
                return x1.get_FunctionName() == x2.get_FunctionName() && SharpAlg.Native.FunctionalExtensions.EnumerableEqual$1(SharpAlg.Native.Expr.ctor, x1.get_Args(), x2.get_Args(), $CreateDelegate(this, this.EqualsCore));
            }));
        },
        DoEqualityCheck$1: function (T, expr2, equalityCheck)
        {
            var other = As(this.expr, T);
            return other != null && equalityCheck(other, expr2);
        },
        EqualsCore: function (expr1, expr2)
        {
            return expr1.Visit$1(System.Boolean.ctor, this.Clone(expr2));
        },
        GetArgsEqualComparer: function ()
        {
            return $CreateAnonymousDelegate(this, function (x, y)
            {
                return SharpAlg.Native.FunctionalExtensions.EnumerableEqual$1(SharpAlg.Native.Expr.ctor, x, y, $CreateDelegate(this, this.EqualsCore));
            });
        },
        Clone: function (expr)
        {
            return new SharpAlg.Native.ExpressionEqualityComparer.ctor(expr);
        },
        CompareMultiExpr$1: function (T, multi)
        {
            return this.DoEqualityCheck$1(T, multi, $CreateAnonymousDelegate(this, function (x1, x2)
            {
                return this.GetArgsEqualComparer()(x1.get_Args(), x2.get_Args());
            }));
        }
    }
};
JsTypes.push(SharpAlg$Native$ExpressionEqualityComparer);
var SharpAlg$Native$ExpressionEquivalenceComparer =
{
    fullname: "SharpAlg.Native.ExpressionEquivalenceComparer",
    baseTypeName: "SharpAlg.Native.ExpressionEqualityComparer",
    assemblyName: "SharpAlg.Implementation",
    Kind: "Class",
    definition:
    {
        ctor: function (expr)
        {
            SharpAlg.Native.ExpressionEqualityComparer.ctor.call(this, expr);
        },
        GetArgsEqualComparer: function ()
        {
            return $CreateAnonymousDelegate(this, function (x, y)
            {
                return SharpAlg.Native.FunctionalExtensions.SetEqual$1(SharpAlg.Native.Expr.ctor, x, y, $CreateDelegate(this, this.EqualsCore));
            });
        },
        Clone: function (expr)
        {
            return new SharpAlg.Native.ExpressionEquivalenceComparer.ctor(expr);
        }
    }
};
JsTypes.push(SharpAlg$Native$ExpressionEquivalenceComparer);
