/*Generated by SharpKit 5 v5.01.1000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpAlg$Native$Context =
{
    fullname: "SharpAlg.Native.Context",
    baseTypeName: "System.Object",
    assemblyName: "SharpAlg.Implementation",
    interfaceNames: ["SharpAlg.Native.IContext"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.names = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, SharpAlg.Native.Expr.ctor);
            this.functions = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, SharpAlg.Native.Function.ctor);
            this._ReadOnly = false;
            System.Object.ctor.call(this);
        },
        ReadOnly$$: "System.Boolean",
        get_ReadOnly: function ()
        {
            return this._ReadOnly;
        },
        set_ReadOnly: function (value)
        {
            this._ReadOnly = value;
        },
        Register$$Function: function (func)
        {
            this.CheckReadonly();
            this.functions.set_Item$$TKey(func.get_Name(), func);
            return this;
        },
        GetFunction: function (name)
        {
            return SharpAlg.Native.FunctionalExtensions.TryGetValue$2(System.String.ctor, SharpAlg.Native.Function.ctor, this.functions, name);
        },
        Register$$String$$Expr: function (name, value)
        {
            this.CheckReadonly();
            this.names.set_Item$$TKey(name, value);
            return this;
        },
        GetValue: function (name)
        {
            return SharpAlg.Native.FunctionalExtensions.TryGetValue$2(System.String.ctor, SharpAlg.Native.Expr.ctor, this.names, name);
        },
        CheckReadonly: function ()
        {
            if (this.get_ReadOnly())
                throw $CreateException(new System.InvalidOperationException.ctor(), new Error());
        }
    }
};
JsTypes.push(SharpAlg$Native$Context);
