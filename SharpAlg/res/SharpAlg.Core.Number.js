/*Generated by SharpKit 5 v5.01.1000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpAlg$Native$Number =
{
    fullname: "SharpAlg.Native.Number",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        ToSameType: function (n1, n2)
        {
            var type = System.Math.Max$$Int32$$Int32(n1.Value.get_NumberType(), n2.Value.get_NumberType());
            n1.Value = n1.Value.ConvertTo(type);
            n2.Value = n2.Value.ConvertTo(type);
        },
        op_Equality: function (n1, n2)
        {
            if (n1 != null && n2 != null)
                (function ()
                {
                    n1 = {Value: n1};
                    n2 = {Value: n2};
                    var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                    n1 = n1.Value;
                    n2 = n2.Value;
                    return $res;
                })();
            return System.Object.Equals$$Object$$Object(n1, n2);
        },
        op_Inequality: function (n1, n2)
        {
            return !(SharpAlg.Native.Number.op_Equality(n1, n2));
        },
        op_GreaterThanOrEqual: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return !n1.Less(n2);
        },
        op_LessThanOrEqual: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return !n1.Greater(n2);
        },
        op_LessThan: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Less(n2);
        },
        op_GreaterThan: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Greater(n2);
        },
        op_Multiply: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Multiply(n2);
        },
        op_Division: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Divide(n2);
        },
        op_Addition: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Add(n2);
        },
        op_Subtraction: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Subtract(n2);
        },
        op_ExclusiveOr: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Power(n2);
        },
        Ln: function (n)
        {
            return SharpAlg.Native.Number.FromDouble(System.Math.Log$$Double(SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.FloatNumber.ctor, n).value));
        },
        cctor: function ()
        {
            SharpAlg.Native.Number.IntegerNumberType = 0;
            SharpAlg.Native.Number.FloatNumberType = 1;
            SharpAlg.Native.Number.Zero = null;
            SharpAlg.Native.Number.One = null;
            SharpAlg.Native.Number.Two = null;
            SharpAlg.Native.Number.MinusOne = null;
            SharpAlg.Native.Number.Zero = SharpAlg.Native.Number.FromDouble(0);
            SharpAlg.Native.Number.One = SharpAlg.Native.Number.FromDouble(1);
            SharpAlg.Native.Number.Two = SharpAlg.Native.Number.FromDouble(2);
            SharpAlg.Native.Number.MinusOne = SharpAlg.Native.Number.FromDouble(-1);
        },
        FromDouble: function (value)
        {
            return new SharpAlg.Native.FloatNumber.ctor(value);
        },
        FromLong: function (value)
        {
            return new SharpAlg.Native.IntegerNumber.ctor(value);
        },
        FromString: function (s)
        {
            return SharpAlg.Native.Number.FromDouble(SharpAlg.Native.PlatformHelper.Parse(s));
        },
        FromIntString: function (s)
        {
            return SharpAlg.Native.Number.FromLong(System.Int64.Parse$$String(s));
        }
    },
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        ConvertTo: function (type)
        {
            if (type < this.get_NumberType())
                throw $CreateException(new System.NotImplementedException.ctor(), new Error());
            if (type == this.get_NumberType())
                return this;
            return this.ConvertToCore(type);
        },
        NumberType$$: "System.Int32"
    }
};
JsTypes.push(SharpAlg$Native$Number);
var SharpAlg$Native$FloatNumber =
{
    fullname: "SharpAlg.Native.FloatNumber",
    baseTypeName: "SharpAlg.Native.Number",
    staticDefinition:
    {
        cctor: function ()
        {
        }
    },
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function (value)
        {
            this.value = 0;
            SharpAlg.Native.Number.ctor.call(this);
            this.value = value;
        },
        NumberType$$: "System.Int32",
        get_NumberType: function ()
        {
            return 1;
        },
        ConvertToCore: function (type)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Equals$$Object: function (obj)
        {
            var other = As(obj, SharpAlg.Native.FloatNumber.ctor);
            return SharpAlg.Native.Number.op_Inequality(other, null) && other.value == this.value;
        },
        GetHashCode: function ()
        {
            return this.value.GetHashCode();
        },
        toString: function ()
        {
            return SharpAlg.Native.PlatformHelper.ToInvariantString(this.value);
        },
        Add: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x + y;
            }));
        },
        Subtract: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x - y;
            }));
        },
        Multiply: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x * y;
            }));
        },
        Divide: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x / y;
            }));
        },
        Power: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return System.Math.Pow(x, y);
            }));
        },
        Less: function (n)
        {
            return this.BinaryOperation$1$$Number$$Func$3(System.Boolean.ctor, n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x < y;
            }));
        },
        Greater: function (n)
        {
            return this.BinaryOperation$1$$Number$$Func$3(System.Boolean.ctor, n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x > y;
            }));
        },
        BinaryOperation$1$$Number$$Func$3: function (T, n, operation)
        {
            return operation(this.value, SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.FloatNumber.ctor, n).value);
        },
        BinaryOperation$$Number$$Func$3$Double$Double$Double: function (n, operation)
        {
            return SharpAlg.Native.Number.FromDouble(this.BinaryOperation$1$$Number$$Func$3(System.Double.ctor, n, operation));
        }
    }
};
JsTypes.push(SharpAlg$Native$FloatNumber);
var SharpAlg$Native$IntegerNumber =
{
    fullname: "SharpAlg.Native.IntegerNumber",
    baseTypeName: "SharpAlg.Native.Number",
    staticDefinition:
    {
        cctor: function ()
        {
        }
    },
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function (value)
        {
            this.value = 0;
            SharpAlg.Native.Number.ctor.call(this);
            this.value = value;
        },
        NumberType$$: "System.Int32",
        get_NumberType: function ()
        {
            return 0;
        },
        ConvertToCore: function (type)
        {
            return SharpAlg.Native.Number.FromDouble(this.value);
        },
        Equals$$Object: function (obj)
        {
            var other = As(obj, SharpAlg.Native.IntegerNumber.ctor);
            return SharpAlg.Native.Number.op_Inequality(other, null) && other.value == this.value;
        },
        GetHashCode: function ()
        {
            return this.value.GetHashCode();
        },
        toString: function ()
        {
            return this.value.toString();
        },
        Add: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x + y;
            }));
        },
        Subtract: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x - y;
            }));
        },
        Multiply: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x * y;
            }));
        },
        Divide: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x / y;
            }));
        },
        Power: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return Cast(System.Math.Pow(x, y), System.Int64.ctor);
            }));
        },
        Less: function (n)
        {
            return this.BinaryOperation$1$$Number$$Func$3(System.Boolean.ctor, n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x < y;
            }));
        },
        Greater: function (n)
        {
            return this.BinaryOperation$1$$Number$$Func$3(System.Boolean.ctor, n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x > y;
            }));
        },
        BinaryOperation$1$$Number$$Func$3: function (T, n, operation)
        {
            return operation(this.value, SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.IntegerNumber.ctor, n).value);
        },
        BinaryOperation$$Number$$Func$3$Int64$Int64$Int64: function (n, operation)
        {
            return SharpAlg.Native.Number.FromLong(this.BinaryOperation$1$$Number$$Func$3(System.Int64.ctor, n, operation));
        }
    }
};
JsTypes.push(SharpAlg$Native$IntegerNumber);
