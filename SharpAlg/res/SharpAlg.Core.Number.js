/*Generated by SharpKit 5 v5.01.1000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var SharpAlg$Native$Number =
{
    fullname: "SharpAlg.Native.Number",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        ToSameType: function (n1, n2)
        {
            var type = System.Math.Max$$Int32$$Int32(n1.Value.get_NumberType(), n2.Value.get_NumberType());
            n1.Value = n1.Value.ConvertTo(type);
            n2.Value = n2.Value.ConvertTo(type);
        },
        op_Equality: function (n1, n2)
        {
            if (n1 != null && n2 != null)
                (function ()
                {
                    n1 = {Value: n1};
                    n2 = {Value: n2};
                    var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                    n1 = n1.Value;
                    n2 = n2.Value;
                    return $res;
                })();
            return System.Object.Equals$$Object$$Object(n1, n2);
        },
        op_Inequality: function (n1, n2)
        {
            return !(SharpAlg.Native.Number.op_Equality(n1, n2));
        },
        op_GreaterThanOrEqual: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return !n1.Less(n2);
        },
        op_LessThanOrEqual: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return !n1.Greater(n2);
        },
        op_LessThan: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Less(n2);
        },
        op_GreaterThan: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Greater(n2);
        },
        Compare$$Number$$Number: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Compare$$Number(n2);
        },
        op_Multiply: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Multiply(n2);
        },
        op_Division: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Divide(n2);
        },
        op_Addition: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Add(n2);
        },
        op_Subtraction: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Subtract(n2);
        },
        op_ExclusiveOr: function (n1, n2)
        {
            (function ()
            {
                n1 = {Value: n1};
                n2 = {Value: n2};
                var $res = SharpAlg.Native.Number.ToSameType(n1, n2);
                n1 = n1.Value;
                n2 = n2.Value;
                return $res;
            })();
            return n1.Power(n2);
        },
        Ln: function (n)
        {
            return SharpAlg.Native.Number.FromDouble(System.Math.Log$$Double(SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.FloatNumber.ctor, n).value));
        },
        cctor: function ()
        {
            SharpAlg.Native.Number.IntegerNumberType = 0;
            SharpAlg.Native.Number.FloatNumberType = 1;
            SharpAlg.Native.Number.Zero = null;
            SharpAlg.Native.Number.One = null;
            SharpAlg.Native.Number.Two = null;
            SharpAlg.Native.Number.MinusOne = null;
            SharpAlg.Native.Number.Zero = SharpAlg.Native.Number.FromDouble(0);
            SharpAlg.Native.Number.One = SharpAlg.Native.Number.FromDouble(1);
            SharpAlg.Native.Number.Two = SharpAlg.Native.Number.FromDouble(2);
            SharpAlg.Native.Number.MinusOne = SharpAlg.Native.Number.FromDouble(-1);
        },
        FromDouble: function (value)
        {
            return new SharpAlg.Native.FloatNumber.ctor(value);
        },
        FromLong: function (value)
        {
            return new SharpAlg.Native.IntegerNumber.ctor(value);
        },
        FromString: function (s)
        {
            return SharpAlg.Native.Number.FromDouble(SharpAlg.Native.PlatformHelper.Parse(s));
        },
        FromIntString: function (s)
        {
            return SharpAlg.Native.Number.FromLong(System.Int64.Parse$$String(s));
        },
        FromLongIntString: function (s)
        {
            return SharpAlg.Native.LongIntegerNumber.FromLongIntStringCore(s);
        }
    },
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        ConvertTo: function (type)
        {
            if (type < this.get_NumberType())
                throw $CreateException(new System.NotImplementedException.ctor(), new Error());
            if (type == this.get_NumberType())
                return this;
            return this.ConvertToCore(type);
        },
        NumberType$$: "System.Int32",
        Less: function (n)
        {
            return this.Compare$$Number(n) < 0;
        },
        Greater: function (n)
        {
            return this.Compare$$Number(n) > 0;
        },
        Equals$$Object: function (obj)
        {
            var other = As(obj, SharpAlg.Native.Number.ctor);
            return this.Compare$$Number(other) == 0;
        }
    }
};
JsTypes.push(SharpAlg$Native$Number);
var SharpAlg$Native$FloatNumber =
{
    fullname: "SharpAlg.Native.FloatNumber",
    baseTypeName: "SharpAlg.Native.Number",
    staticDefinition:
    {
        cctor: function ()
        {
        }
    },
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function (value)
        {
            this.value = 0;
            SharpAlg.Native.Number.ctor.call(this);
            this.value = value;
        },
        NumberType$$: "System.Int32",
        get_NumberType: function ()
        {
            return 1;
        },
        ConvertToCore: function (type)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        GetHashCode: function ()
        {
            return this.value.GetHashCode();
        },
        toString: function ()
        {
            return SharpAlg.Native.PlatformHelper.ToInvariantString(this.value);
        },
        Add: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x + y;
            }));
        },
        Subtract: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x - y;
            }));
        },
        Multiply: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x * y;
            }));
        },
        Divide: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x / y;
            }));
        },
        Power: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Double$Double$Double(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return System.Math.Pow(x, y);
            }));
        },
        Compare$$Number: function (n)
        {
            return this.BinaryOperation$1$$Number$$Func$3(System.Int32.ctor, n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return System.Math.Sign$$Double(x - y);
            }));
        },
        BinaryOperation$1$$Number$$Func$3: function (T, n, operation)
        {
            return operation(this.value, SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.FloatNumber.ctor, n).value);
        },
        BinaryOperation$$Number$$Func$3$Double$Double$Double: function (n, operation)
        {
            return SharpAlg.Native.Number.FromDouble(this.BinaryOperation$1$$Number$$Func$3(System.Double.ctor, n, operation));
        }
    }
};
JsTypes.push(SharpAlg$Native$FloatNumber);
var SharpAlg$Native$IntegerNumber =
{
    fullname: "SharpAlg.Native.IntegerNumber",
    baseTypeName: "SharpAlg.Native.Number",
    staticDefinition:
    {
        cctor: function ()
        {
        }
    },
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function (value)
        {
            this.value = 0;
            SharpAlg.Native.Number.ctor.call(this);
            this.value = value;
        },
        NumberType$$: "System.Int32",
        get_NumberType: function ()
        {
            return 0;
        },
        ConvertToCore: function (type)
        {
            return SharpAlg.Native.Number.FromDouble(this.value);
        },
        GetHashCode: function ()
        {
            return this.value.GetHashCode();
        },
        toString: function ()
        {
            return this.value.toString();
        },
        Add: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x + y;
            }));
        },
        Subtract: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x - y;
            }));
        },
        Multiply: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x * y;
            }));
        },
        Divide: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return x / y;
            }));
        },
        Power: function (n)
        {
            return this.BinaryOperation$$Number$$Func$3$Int64$Int64$Int64(n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return Cast(System.Math.Pow(x, y), System.Int64.ctor);
            }));
        },
        Compare$$Number: function (n)
        {
            return this.BinaryOperation$1$$Number$$Func$3(System.Int32.ctor, n, $CreateAnonymousDelegate(this, function (x, y)
            {
                return Cast((x - y), System.Int32.ctor);
            }));
        },
        BinaryOperation$1$$Number$$Func$3: function (T, n, operation)
        {
            return operation(this.value, SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.IntegerNumber.ctor, n).value);
        },
        BinaryOperation$$Number$$Func$3$Int64$Int64$Int64: function (n, operation)
        {
            return SharpAlg.Native.Number.FromLong(this.BinaryOperation$1$$Number$$Func$3(System.Int64.ctor, n, operation));
        }
    }
};
JsTypes.push(SharpAlg$Native$IntegerNumber);
var SharpAlg$Native$LongIntegerNumber =
{
    fullname: "SharpAlg.Native.LongIntegerNumber",
    baseTypeName: "SharpAlg.Native.Number",
    staticDefinition:
    {
        cctor: function ()
        {
            SharpAlg.Native.LongIntegerNumber.Base = 10;
            SharpAlg.Native.LongIntegerNumber.BaseCount = 4;
            SharpAlg.Native.LongIntegerNumber.BaseFull = 10000;
        },
        FromLongIntStringCore: function (s)
        {
            var digits = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var currentPart = 0;
            var currentIndex = 0;
            var currentPower = 1;
            var ZeroCode = SharpAlg.Native.PlatformHelper.CharToInt("0");
            var lastIndex = s.charAt(0) == "-" ? 1 : 0;
            for (var i = s.length - 1; i >= lastIndex; i--)
            {
                currentPart += (SharpAlg.Native.PlatformHelper.CharToInt(s.charAt(i)) - ZeroCode) * currentPower;
                currentIndex++;
                currentPower *= 10;
                if (currentIndex == 4)
                {
                    currentIndex = 0;
                    digits.Add(currentPart);
                    currentPart = 0;
                    currentPower = 1;
                }
            }
            if (currentIndex > 0 && currentPart > 0)
            {
                digits.Add(currentPart);
            }
            return new SharpAlg.Native.LongIntegerNumber.ctor(digits, lastIndex == 1);
        },
        CompareCore: function (n1, n2)
        {
            if (!System.Linq.Enumerable.Any$1$$IEnumerable$1(System.Int32.ctor, n1.parts) && !System.Linq.Enumerable.Any$1$$IEnumerable$1(System.Int32.ctor, n2.parts))
                return 0;
            if (!System.Linq.Enumerable.Any$1$$IEnumerable$1(System.Int32.ctor, n2.parts))
                return n1.isNegative ? -1 : 1;
            if (!System.Linq.Enumerable.Any$1$$IEnumerable$1(System.Int32.ctor, n1.parts))
                return n2.isNegative ? 1 : -1;
            if (n1.isNegative && !n2.isNegative)
                return -1;
            if (!n1.isNegative && n2.isNegative)
                return 1;
            var partsComparisonResult = SharpAlg.Native.LongIntegerNumber.CompareParts(n1.parts, n2.parts);
            return n1.isNegative ? -partsComparisonResult : partsComparisonResult;
        },
        CompareParts: function (parts1, parts2)
        {
            var lenDifference = parts1.get_Count() - parts2.get_Count();
            if (lenDifference != 0)
                return lenDifference;
            var count = parts1.get_Count();
            for (var i = count - 1; i >= 0; i--)
            {
                var difference = parts1.get_Item$$Int32(i) - parts2.get_Item$$Int32(i);
                if (difference != 0)
                    return difference;
            }
            return 0;
        }
    },
    assemblyName: "SharpAlg.Core",
    Kind: "Class",
    definition:
    {
        ctor: function (parts, isNegative)
        {
            this.isNegative = false;
            this.parts = null;
            SharpAlg.Native.Number.ctor.call(this);
            this.isNegative = isNegative;
            this.parts = parts;
        },
        NumberType$$: "System.Int32",
        get_NumberType: function ()
        {
            return 0;
        },
        ConvertToCore: function (type)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Compare$$Number: function (n)
        {
            var other = Cast(n, SharpAlg.Native.LongIntegerNumber.ctor);
            return SharpAlg.Native.LongIntegerNumber.CompareCore(this, other);
        },
        GetHashCode: function ()
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        toString: function ()
        {
            var startIndex = this.parts.get_Count() - 1;
            var sb = new System.Text.StringBuilder.ctor();
            if (this.parts.get_Count() == 0)
                return "0";
            if (this.isNegative)
                sb.Append$$String("-");
            for (var i = startIndex; i >= 0; i--)
            {
                var stringValue = this.parts.get_Item$$Int32(i).toString();
                if (i != startIndex)
                {
                    for (var j = 4 - stringValue.length; j > 0; j--)
                    {
                        sb.Append$$Char("0");
                    }
                }
                sb.Append$$String(stringValue);
            }
            return sb.toString();
        },
        Add: function (n)
        {
            var longNumber = SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.LongIntegerNumber.ctor, n);
            if (!this.isNegative && !longNumber.isNegative)
                return this.AddCore(longNumber);
            if (longNumber.isNegative)
            {
                var invertedRight = new SharpAlg.Native.LongIntegerNumber.ctor(longNumber.parts, false);
                if (SharpAlg.Native.Number.op_LessThan(this, invertedRight))
                    return new SharpAlg.Native.LongIntegerNumber.ctor(SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.LongIntegerNumber.ctor, invertedRight.Subtract(this)).parts, true);
            }
            else
            {
                var invertedLeft = new SharpAlg.Native.LongIntegerNumber.ctor(this.parts, false);
                if (SharpAlg.Native.Number.op_LessThan(longNumber, invertedLeft))
                    return new SharpAlg.Native.LongIntegerNumber.ctor(SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.LongIntegerNumber.ctor, invertedLeft.Subtract(longNumber)).parts, true);
            }
            return this.AddCore(longNumber);
        },
        Subtract: function (n)
        {
            var longNumber = SharpAlg.Native.FunctionalExtensions.ConvertCast$1(SharpAlg.Native.LongIntegerNumber.ctor, n);
            return this.Add(new SharpAlg.Native.LongIntegerNumber.ctor(longNumber.parts, !longNumber.isNegative));
        },
        AddCore: function (longNumber)
        {
            var count = System.Math.Max$$Int32$$Int32(this.parts.get_Count(), longNumber.parts.get_Count());
            var result = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var carry = 0;
            for (var i = 0; i < count; i++)
            {
                var resultPart = this.GetPart(i) + longNumber.GetPart(i) + carry;
                if (resultPart >= 10000)
                {
                    resultPart = resultPart - 10000;
                    carry = 1;
                }
                else if (resultPart < 0)
                {
                    resultPart = resultPart + 10000;
                    carry = -1;
                }
                else
                {
                    carry = 0;
                }
                result.Add(resultPart);
            }
            if (carry > 0)
                result.Add(carry);
            for (var i = result.get_Count() - 1; i >= 0; i--)
            {
                if (result.get_Item$$Int32(i) == 0)
                    result.RemoveAt(i);
                else
                    break;
            }
            return new SharpAlg.Native.LongIntegerNumber.ctor(result, false);
        },
        Multiply: function (n)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Divide: function (n)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Power: function (n)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        GetPart: function (index)
        {
            return index < this.parts.get_Count() ? (this.isNegative ? -this.parts.get_Item$$Int32(index) : this.parts.get_Item$$Int32(index)) : 0;
        }
    }
};
JsTypes.push(SharpAlg$Native$LongIntegerNumber);
