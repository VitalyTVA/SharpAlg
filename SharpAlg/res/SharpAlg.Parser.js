/*Generated by SharpKit 5 v5.01.1000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof(SharpAlg) == "undefined")
    var SharpAlg = {};
if (typeof(SharpAlg.Native) == "undefined")
    SharpAlg.Native = {};
if (typeof(SharpAlg.Native.Parser) == "undefined")
    SharpAlg.Native.Parser = {};
SharpAlg.Native.Parser.Buffer = function (source)
{
    this.source = null;
    this.position = 0;
    this.source = source;
};
SharpAlg.Native.Parser.Buffer.EOF = 65536;
SharpAlg.Native.Parser.Buffer.prototype.Read = function ()
{
    if (this.get_Position() < this.source.length)
        return this.source.charAt(this.set_Position(this.get_Position() + 1));
    return 65536;
};
SharpAlg.Native.Parser.Buffer.prototype.Peek = function ()
{
    var curPos = this.get_Position();
    var ch = this.Read();
    this.set_Position(curPos);
    return ch;
};
SharpAlg.Native.Parser.Buffer.prototype.get_Position = function ()
{
    return this.position;
};
SharpAlg.Native.Parser.Buffer.prototype.set_Position = function (value)
{
    if (value < 0 || value > this.source.length)
    {
        throw $CreateException(new SharpAlg.Native.Parser.FatalError.ctor("Buffer out of bounds access, position: " + value), new Error());
    }
    this.position = value;
};
SharpAlg.Native.Parser.ErrorsBase = function ()
{
    this.errorsBuilder = new System.Text.StringBuilder.ctor();
    this.Count = 0;
};
SharpAlg.Native.Parser.ErrorsBase.errMsgFormat = "Error at line {0} column {1}: {2}";
SharpAlg.Native.Parser.ErrorsBase.GetErrorText = function (line, column, errorText)
{
    return System.String.Format$$String$$Object$$Object$$Object("Error at line {0} column {1}: {2}", line, column, errorText);
};
SharpAlg.Native.Parser.ErrorsBase.prototype.get_Errors = function ()
{
    return this.errorsBuilder.toString();
};
SharpAlg.Native.Parser.ErrorsBase.prototype.SynErr = function (line, column, parserErrorCode)
{
    this.AppendLine(System.String.Format$$String$$Object$$Object$$Object("Error at line {0} column {1}: {2}", line, column, this.GetErrorByCode(parserErrorCode)));
    this.Count++;
};
SharpAlg.Native.Parser.ErrorsBase.prototype.SemErr = function (line, column, errorText)
{
    this.AppendLine(SharpAlg.Native.Parser.ErrorsBase.GetErrorText(line, column, errorText));
    this.Count++;
};
SharpAlg.Native.Parser.ErrorsBase.prototype.SemErr = function (s)
{
    this.AppendLine(s);
    this.Count++;
};
SharpAlg.Native.Parser.ErrorsBase.prototype.Warning = function (line, column, errorText)
{
    this.AppendLine(System.String.Format$$String$$Object$$Object$$Object("Error at line {0} column {1}: {2}", line, column, errorText));
};
SharpAlg.Native.Parser.ErrorsBase.prototype.Warning = function (warningText)
{
    this.AppendLine(warningText);
};
SharpAlg.Native.Parser.ErrorsBase.prototype.AppendLine = function (s)
{
    this.errorsBuilder.AppendLine$$String(s);
};
SharpAlg.Native.Parser.Token = function ()
{
    this.kind = 0;
    this.pos = 0;
    this.charPos = 0;
    this.col = 0;
    this.line = 0;
    this.val = null;
    this.next = null;
};
SharpAlg.Native.Parser.Parser = function (scanner)
{
    this.scanner = null;
    this.errors = null;
    this.t = null;
    this.la = null;
    this.errDist = 2;
    this.scanner = scanner;
    this.errors = new SharpAlg.Native.Parser.Errors.ctor();
};
SharpAlg.Native.Parser.Parser._EOF = 0;
SharpAlg.Native.Parser.Parser._ident = 1;
SharpAlg.Native.Parser.Parser._number = 2;
SharpAlg.Native.Parser.Parser.maxT = 4;
SharpAlg.Native.Parser.Parser.T = true;
SharpAlg.Native.Parser.Parser.x = false;
SharpAlg.Native.Parser.Parser.minErrDist = 2;
SharpAlg.Native.Parser.Parser.set = [true, false, false, false, false, false];
SharpAlg.Native.Parser.Parser.prototype.SynErr = function (n)
{
    if (this.errDist >= 2)
        this.errors.SynErr(this.la.line, this.la.col, n);
    this.errDist = 0;
};
SharpAlg.Native.Parser.Parser.prototype.SemErr = function (msg)
{
    if (this.errDist >= 2)
        this.errors.SemErr(this.t.line, this.t.col, msg);
    this.errDist = 0;
};
SharpAlg.Native.Parser.Parser.prototype.Get = function ()
{
    for (;;)
    {
        this.t = this.la;
        this.la = this.scanner.Scan();
        if (this.la.kind <= 4)
        {
            ++this.errDist;
            break;
        }
        this.la = this.t;
    }
};
SharpAlg.Native.Parser.Parser.prototype.Expect = function (n)
{
    if (this.la.kind == n)
        this.Get();
    else
    {
        this.SynErr(n);
    }
};
SharpAlg.Native.Parser.Parser.prototype.StartOf = function (s)
{
    return SharpAlg.Native.Parser.Parser.set[s, this.la.kind];
};
SharpAlg.Native.Parser.Parser.prototype.ExpectWeak = function (n, follow)
{
    if (this.la.kind == n)
        this.Get();
    else
    {
        this.SynErr(n);
        while (!this.StartOf(follow))
        this.Get();
    }
};
SharpAlg.Native.Parser.Parser.prototype.WeakSeparator = function (n, syFol, repFol)
{
    var kind = this.la.kind;
    if (kind == n)
    {
        this.Get();
        return true;
    }
    else if (this.StartOf(repFol))
    {
        return false;
    }
    else
    {
        this.SynErr(n);
        while (!(SharpAlg.Native.Parser.Parser.set[syFol, kind] || SharpAlg.Native.Parser.Parser.set[repFol, kind] || SharpAlg.Native.Parser.Parser.set[0, kind]))
        {
            this.Get();
            kind = this.la.kind;
        }
        return this.StartOf(syFol);
    }
};
SharpAlg.Native.Parser.Parser.prototype.SharpAlg = function ()
{
    this.Term();
    while (this.la.kind == 3)
    {
        this.Get();
        this.Term();
    }
};
SharpAlg.Native.Parser.Parser.prototype.Term = function ()
{
    this.Expect(2);
};
SharpAlg.Native.Parser.Parser.prototype.Parse = function ()
{
    this.la = new SharpAlg.Native.Parser.Token();
    this.la.val = "";
    this.Get();
    this.SharpAlg();
    this.Expect(0);
};
